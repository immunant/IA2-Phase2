diff --git a/base/allocator/partition_allocator/partition_bucket.cc b/base/allocator/partition_allocator/partition_bucket.cc
index 6434ee54..c27030dd 100644
--- a/base/allocator/partition_allocator/partition_bucket.cc
+++ b/base/allocator/partition_allocator/partition_bucket.cc
@@ -41,6 +41,9 @@
 #include "base/allocator/partition_allocator/starscan/state_bitmap.h"
 #endif  // BUILDFLAG(STARSCAN)
 
+#include <sys/mman.h>
+#include <ia2.h>
+
 namespace partition_alloc::internal {
 
 namespace {
@@ -187,6 +190,18 @@ uintptr_t ReserveMemoryFromPool(pool_handle pool,
 #endif
 
   PA_DCHECK(!(reserved_address % kSuperPageSize));
+
+  // TODO: This call to ia2_get_pkey will always return a pkey between 1 and 15. For shared
+  // allocations (i.e. pkey 0) we currently use the glibc allocator. Ideally we should propagate the
+  // allocator's pkey down to this function when allocations trigger calls to it so we can use the
+  // same allocator for shared and private allocations.
+  size_t pkey = ::ia2_get_pkey();
+  int rc = pkey_mprotect((void *)reserved_address, requested_size, PROT_READ | PROT_WRITE, pkey);
+  if (rc != 0) {
+        printf("Compartment %zu failed to pkey_mprotect reserved heap memory (%d)", pkey, rc);
+        exit(-1);
+  }
+
   return reserved_address;
 }
 
